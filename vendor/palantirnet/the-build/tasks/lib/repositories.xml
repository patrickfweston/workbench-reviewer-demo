<?xml version="1.0"?>

<!--
  @file repositories.xml
  Targets for managing code artifact repositories.

  Copyright 2016 Palantir.net, Inc.
  -->

<project name="repositories" default="status">


    <target name="status">
        <echo>Hello world.</echo>
    </target>


    <!--
        Target: init-repository
        -->
    <target name="init-repository">
        <fail unless="repo.dir" />
        <fail unless="repo.source" />

        <!-- If this directory exists and is NOT a git directory, remove it. -->
        <if>
            <and>
                <available file="${repo.dir}" type="dir" />
                <not><available file="${repo.dir}/.git" type="dir" /></not>
            </and>
            <then>
                <fail message="Directory ${repo.dir} exists but is not a git repository. Please remove it before continuing." />
            </then>
        </if>

        <!-- If there is no directory there, clone the repo. -->
        <if>
            <not><available file="${repo.dir}/.git" type="dir" /></not>
            <then>
                <echo>Cloning the repository from ${repo.source}</echo>
                <gitclone repository="${repo.source}" targetPath="${repo.dir}" />
            </then>
        </if>
    </target>


    <!--
        Target: init-branch
        -->
    <target name="init-branch">
        <fail unless="repo.dir" />
        <fail unless="repo.branch" />

        <!-- Make sure we have this branch if it exists upstream. -->
        <trycatch>
            <try>
                <gitfetch repository="${repo.dir}" refspec="${repo.branch}" />
            </try>
            <catch></catch>
        </trycatch>

        <exec command="git branch --list -r origin/${repo.branch}" dir="${repo.dir}" outputproperty="branch_remote" />
        <exec command="git branch --list ${repo.branch}" dir="${repo.dir}" outputproperty="branch_local" />
        <exec command="git rev-parse --abbrev-ref ${repo.branch}@{upstream}" dir="${repo.dir}" outputproperty="branch_tracking" />

        <if>
            <!-- Branch does not exist on local or remote. -->
            <and>
                <equals arg1="${branch_local}" arg2="" />
                <equals arg1="${branch_remote}" arg2="" />
            </and>
            <then>
                <!-- Create an "orphan" branch. -->
                <exec command="git checkout --orphan ${repo.branch}" dir="${repo.dir}" checkreturn="true" logoutput="true" />

                <!-- Remove all the existing files, because this is an orphan branch. -->
                <exec command="git rm -rf ." dir="${repo.dir}" />
                <delete includeemptydirs="true">
                    <fileset dir="${repo.dir}" defaultexcludes="false">
                        <include name="**/*" />
                        <exclude name=".git" />
                        <exclude name=".gitignore" />
                        <exclude name=".git/**" />
                    </fileset>
                </delete>

                <!-- Add a single placeholder file. -->
                <touch file="${repo.dir}/.gitignore" />

                <!-- The 'allFiles' flag on the GitCommitTask does not add files that aren't already tracked by git. -->
                <exec command="git add --all" dir="${repo.dir}" />

                <!-- Commit it all. -->
                <gitcommit repository="${repo.dir}" message="Initial commit." allFiles="true" />
            </then>
            <else>
                <!-- Otherwise just make sure the branch is checked out. -->
                <gitcheckout repository="${repo.dir}" branchname="${repo.branch}" force="true" />

                <!-- And pull, if there's a remote branch. -->
                <if>
                    <not><equals arg1="${branch_remote}" arg2="" /></not>
                    <then>
                        <trycatch>
                            <try>
                                <!--
                                    Pull gently at first, allowing fast-forward commits but not obliterating
                                    local commits. This allows us to build, examine, and rebuild without
                                    pushing.

                                    Ideally we would use Phing's git pull task, but this should fail if it's
                                    not a fast forward, because we merges are not meaningful in the
                                    artifact. If we DID use Phing's task, it would look like this:

                                        <gitpull repository="${repo.dir}" refspec="${repo.branch}" />

                                    Merges in the artifact are bad because they would create code that was
                                    not generated directly from the development codebase; an artifact with
                                    a merge would not be reproducible by re-running the artifact build task.
                                    -->
                                <exec command="git pull origin ${repo.branch} --ff-only" dir="${repo.dir}" checkreturn="true" />
                            </try>
                            <catch>
                                <!--
                                    Our local artifact has diverged from the upstream artifact. At this
                                    point, we're going to lose our local commits, which is ok because this
                                    is an artifact, not code under active development.
                                    -->
                                <gitpull repository="${repo.dir}" refspec="${repo.branch}:${repo.branch}" force="true" />
                            </catch>
                        </trycatch>
                    </then>
                </if>
            </else>
        </if>
    </target>


    <target name="commit">
        <fail unless="build.dir" />
        <fail unless="repo.dir" />
        <fail unless="message" />

        <property name="tag_prefix" value="" />

        <!-- Get a descriptor of the current ref of the main repository. -->
        <gitdescribe repository="${build.dir}" tags="true" always="true" outputProperty="git_describe_output" />
        <property name="build_commit_ref" value="${git_describe_output}">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </property>

        <!-- Check for changes to the artifact repository. -->
        <exec command="git status --porcelain" dir="${repo.dir}" outputProperty="changes_to_deploy" />

        <if>
            <equals arg1="${changes_to_deploy}" arg2="" />
            <then>
                <echo>No changes to ${repo.dir}.</echo>
            </then>
            <else>
                <!-- Check for un-committed changes to the main repository, so
                     that we can include information about these changes in the
                     commit message for this build. -->
                <exec command="git status --porcelain" dir="${build.dir}" outputProperty="modified_files" />

                <if>
                    <not><equals arg1="${modified_files}" arg2="" /></not>
                    <then>
                        <!-- Whitespace within this property value is intentional. -->
                        <property name="build_message">(${build_commit_ref} / dirty) ${message}

Files with un-committed changes:
${modified_files}
</property>
                    </then>
                    <else>
                        <property name="build_message">[${build_commit_ref}] ${message}</property>

                        <!-- If we're on a tag and the repo is not dirty, then this try-catch will set the ${build_tag} -->
                        <trycatch>
                            <try>
                                <gitdescribe repository="${build.dir}" tags="true" always="true" candidates="0" outputProperty="git_describe_output_2" />
                                <property name="build_tag" value="${git_describe_output_2}">
                                    <filterchain>
                                        <striplinebreaks />
                                        <prefixlines prefix="${tag_prefix}" />
                                    </filterchain>
                                </property>
                            </try>
                            <catch>
                                <!-- We don't really care if we're not on a tag, we just won't tag. -->
                            </catch>
                        </trycatch>
                    </else>
                </if>

                <!-- The 'allFiles' flag on the GitCommitTask does not add files that aren't already tracked by git. -->
                <exec command="git add --all" dir="${repo.dir}" />

                <!-- Commit it all. -->
                <gitcommit repository="${repo.dir}" message="${build_message}" allFiles="true" />

                <!-- We'll have a ${build_tag} if we're right on a tag and the repo is not dirty. -->
                <if>
                    <isset property="build_tag" />
                    <then>
                        <echo>Congratulations! You've built a tagged release for ${build_tag}.</echo>
                        <gittag repository="${repo.dir}" name="${build_tag}" annotate="true" message="Build of tag ${build_tag}." />
                    </then>
                </if>
            </else>
        </if>
    </target>


    <target name="push">
        <fail unless="repo.dir" />
        <fail unless="repo.branch" />

        <!-- If the local repository has forward commits, push them. -->
        <exec command="git cherry origin/${repo.branch}" dir="${repo.dir}" outputProperty="has_forward_commits" />

        <if>
            <not><istrue value="${has_forward_commits}" /></not>
            <then>
                <echo>Nothing to push.</echo>
            </then>
            <else>
                <echo>You have local commits.</echo>
                <if>
                    <or>
                        <equals arg1="${push}" arg2="" />
                        <not><isset property="push" /></not>
                    </or>
                    <then>
                        <input propertyName="push" message="Push your changes?" validArgs="y,n" />
                    </then>
                </if>

                <if>
                    <equals arg1="${push}" arg2="y" />
                    <then>
                        <echo>Pushing changes.</echo>
                        <gitpush repository="${repo.dir}" refspec="${repo.branch}" tags="true" />
                    </then>
                </if>
            </else>
        </if>
    </target>

</project>
