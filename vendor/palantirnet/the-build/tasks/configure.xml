<?xml version="1.0"?>

<!--
  @file configure.xml
  Interactive configuration for the-build.

  Copyright 2016 Palantir.net, Inc.
  -->

<project name="configure" default="configure">
    <!--
        This can be used to configure the build properties for a project.
      -->


    <fail unless="build.dir" />
    <fail unless="build.env" />


    <!-- Target: configure -->
    <!--
        Try:
        configure -Dbuild.env=vagrant -Dupdate=drupal.site_name              ## Updates drupal.site_name only
        configure -Dbuild.env=vagrant -Dupdate=drupal.root -Ddrupal.root=www ## Updates drupal.root to www
        configure -Dbuild.env=vagrant -Dupdate=drupal.new_setting            ## Adds a new setting
     -->
    <target name="configure">
        <fail unless="build.env" />

        <property name="update" value="" />
        <property name="dump" value="" />

        <!--
            Defaults and prompts should come from the caller.

            Interactive updates:
                <property name="prompt.drupal.root" value="Drupal root" />
                <property name="default.drupal.root" value="web" />
                <property name="update" value="drupal.root,something.else" />

            Silent defaults:
                <property name="default.drupal.uri" value="http://${phing.project.name}.local" />
                <property name="dump" value="drupal.uri,another.var" />
            -->

        <!-- Initialized the properties file -->
        <property name="propertiesfile" value="conf/build.${build.env}.properties" />
        <phingcall target="configure-init-environment" />

        <!-- Load properties from the environment we're editing, with the prefix "default.*" -->
        <property file="${build.dir}/${propertiesfile}" prefix="default" />
        <property file="${build.dir}/conf/build.default.properties" prefix="default" />

        <!-- Update properties interactively. -->
        <foreach list="${update}" target="configure-update-property" param="propertyname" />

        <!-- Dump other properties without interaction -->
        <foreach list="${dump}" target="configure-update-property-silent" param="propertyname" />
    </target>


    <target name="configure-init-environment">
        <fail unless="build.dir" />
        <fail unless="propertiesfile" />

        <!-- Create the conf directory if it doesn't already exist. -->
        <if>
            <not><available file="${build.dir}/conf" /></not>
            <then>
                <mkdir dir="${build.dir}/conf" />
            </then>
        </if>

        <!-- Create the properties file if it doesn't already exist. -->
        <if>
            <not><available file="${build.dir}/${propertiesfile}" /></not>
            <then>
                <touch file="${build.dir}/${propertiesfile}" />
            </then>
        </if>
    </target>


    <target name="configure-update-property-silent">
        <fail unless="propertyname" />
        <fail unless="default.${propertyname}" />

        <property name="${propertyname}" value="${default.${propertyname}}" />
        <phingcall target="configure-update-property" />
    </target>


    <target name="configure-update-property">
        <fail unless="build.dir" />
        <fail unless="propertiesfile" />
        <fail unless="propertyname" />

        <property name="prompt.${propertyname}" value="Enter a value for '${propertyname}'" />
        <property name="default.${propertyname}" value="" />

        <!-- Get the new property value from the user. -->
        <propertyprompt propertyName="${propertyname}" defaultValue="${default.${propertyname}}" promptText="${prompt.${propertyname}}" promptCharacter=":" useExistingValue="true" />

        <!-- Load the properties file so we can see if the property is in there yet. -->
        <loadfile property="propertiesfile.contents" file="${build.dir}/${propertiesfile}">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="^${propertyname}=" />
                </linecontainsregexp>
            </filterchain>
        </loadfile>

        <!-- If the property isn't set there yet, add a line for it. -->
        <if>
            <not><contains string="${propertiesfile.contents}" substring="${propertyname}=" /></not>
            <then>
                <!-- Whitespace is significant within this echo; adds a newline after the new property. -->
                <echo file="${build.dir}/${propertiesfile}" append="true">${propertyname}=
</echo>
            </then>
        </if>

        <!-- Apply the new setting to the properties file. -->
        <reflexive>
            <fileset dir="${build.dir}" includes="${propertiesfile}" />
            <filterchain>
                <replaceregexp>
                    <regexp pattern="${propertyname}=.*" replace="${propertyname}=${${propertyname}}" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>


</project>
